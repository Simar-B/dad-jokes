{"version":3,"sources":["components/genJoke.js","components/layout/header.js","App.js","serviceWorker.js","index.js"],"names":["GenJoke","state","joke","displayJoke","getJoke","fetch","headers","Accept","then","resp","json","value","onClick","e","preventDefault","_this","setState","_this2","this","react_default","a","createElement","Container_default","Row_default","className","Button_default","variant","React","Component","Header","App","header","genJoke","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTA6DeA,6MAvDbC,MAAM,CACJC,KAAK,GACLC,aAAY,KAGdC,QAAU,WACV,OAAQC,MAAM,8BAA+B,CAC3CC,QAAS,CACPC,OAAQ,sBAETC,KAAK,SAACC,GAAD,OAAUA,EAAKC,SACpBF,KAAK,SAACG,GAAD,OAAWA,EAAMT,UAGzBU,QAAU,SAACC,GACXA,EAAEC,kBAE4B,IAA3BC,EAAKd,MAAME,YACZY,EAAKC,SAAS,CAACb,aAAY,IAG3BY,EAAKX,UAAUI,KAAK,SAAAN,GAClBa,EAAKC,SAAS,CAACd,+FAKC,IAAAe,EAAAC,KACdA,KAAKd,UAAUI,KAAK,SAAAN,GAChBe,EAAKD,SAAS,CAACd,4CAIvB,OACEiB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KAEAD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAKI,UAAU,0BACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAQM,QAAQ,OAAQd,QAASM,KAAKN,SAAtC,8BAGAO,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAKI,UAAU,0BACdN,KAAKjB,MAAME,aAAegB,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eAAeN,KAAKjB,MAAMC,gBA3CnDyB,IAAMC,WCObC,mLARX,OACEV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACfL,EAAAC,EAAAC,cAAA,wCAJeM,IAAMC,WCkBZE,mLAXX,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cAEfL,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACW,EAAD,cANYL,IAAMC,WCKJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.ed6b9ec9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nclass GenJoke extends React.Component {\r\n  state={\r\n    joke:'',\r\n    displayJoke:false\r\n  }\r\n\r\n  getJoke = () => {\r\n  return (fetch(\"https://icanhazdadjoke.com/\", {\r\n    headers: {\r\n      Accept: \"application/json\"\r\n    }\r\n  }).then((resp) => resp.json())\r\n    .then((value) => value.joke)\r\n  )};\r\n\r\n  onClick = (e) =>{\r\n  e.preventDefault();\r\n\r\n  if(this.state.displayJoke === false){\r\n    this.setState({displayJoke:true})\r\n  }\r\n  else{\r\n    this.getJoke().then(joke => {\r\n      this.setState({joke})\r\n    })\r\n  }\r\n};\r\n\r\n  componentDidMount() {\r\n        this.getJoke().then(joke => {\r\n            this.setState({joke});\r\n})};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Container>\r\n\r\n      <Row className=\"justify-content-center\">\r\n      <Button variant=\"dark\"  onClick={this.onClick}>So you wanna hear a joke?</Button>\r\n      </Row>\r\n\r\n      <Row className=\"justify-content-center\">\r\n      {this.state.displayJoke && <h1 className=\"text-center\">{this.state.joke}</h1>}\r\n      </Row>\r\n\r\n      </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default GenJoke;\r\n","import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"text-center\">\r\n      <h1>Dad Joke Generator</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport GenJoke from './components/genJoke'\nimport Button from 'react-bootstrap/Button';\nimport Header from './components/layout/header';\nimport Row from 'react-bootstrap/Button';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"background\">\n\n      <Header/>\n      <GenJoke/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}